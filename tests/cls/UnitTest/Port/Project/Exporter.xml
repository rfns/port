<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Port.Project.Exporter">
<Super>Port.UnitTest.TestCase,UnitTest.Port.Helper</Super>
<TimeCreated>64426,56009.879156</TimeCreated>

<Property name="Exporter">
<Type>Port.Project.Exporter</Type>
</Property>

<Property name="ConfiguredExtension">
<Type>%String</Type>
</Property>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..ConfiguredExtension = ##class(Port.Configuration).GetSourceExtension()
  do ##class(Port.Configuration).SetSourceExtension("")
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(Port.Configuration).SetSourceExtension(..ConfiguredExtension)
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     
  $$$QuitOnError(..CloneTestProject(..GetTestDirectory("../fixtures"), "dummy-project", 1))
  set ..Exporter = ##class(Port.Project.Exporter).%New(..GetTestDirectory("../fixtures/_/dummy-project"))
  // Turn off logger notification to prevent breaking test feedbacks.
  set ..Exporter.Logger.Silent = 1
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..DeleteTestProject(..GetTestDirectory("../fixtures"), "dummy-project"))
  set ..Exporter = ""
  return $$$OK
]]></Implementation>
</Method>

<Method name="TestOnNew">
<Implementation><![CDATA[
  set exporter = ""
  
  try {
    set exporter = ##class(Port.Project.Exporter).%New("/this/does/not/exist")
  } catch ex {
    do $$$AssertStatusNotOK(ex.AsStatus(), "does not accept inexistent projects")
  }
]]></Implementation>
</Method>

<Method name="TestExportItem">
<FormalSpec>ovewrite:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
  #define ItemPath(%itemName) ##class(Port.Util).GetItemSourcePathFromWorkspace(%itemName, "dummy-project")  
  
  set sc = $$$OK
  set items = ..GetTestProjectItemsPath("dummy-project", ..GetTestDirectory("../fixtures/_/dummy-project"))
  set itemName = ""
  
  do ##class(Port.Util).CSPPhysicalToLogicalPath(..GetTestDirectory("../fixtures/_/dummy-project/web/dummy.html"), .missingFile)
  
  for missingItem = "I.Dont.Exist.CLS", "idontexist.mac", "idontexist.inc", "idontexist.dfi", missingFile {
    do items.SetAt(##class(Port.Util).GetItemSourcePathFromWorkspace(missingItem, "dummy-project"), missingItem)
  }
  
  for i=1:1:items.Count() {
    set itemName = items.Next(itemName)
    set itemLocation = items.GetAt(itemName)
    set sc = ..Exporter.ExportItem(itemName)
    if ##class(Port.Util).ExistsInProject("dummy-project", itemName) {
      if $$$ISERR(sc) quit
      set isSameFile = ##class(%File).Compare($$$ItemPath(itemName), ##class(Port.Util).MountItemSourcePath(itemName, ..GetTestDirectory("../fixtures/dummy-project")))
      if 'isSameFile {
        break
        set sc = $$$ERROR($$$GeneralError, $$$FormatText("files for %1 don't match", itemName))
        quit
      }
    }
  }
  //do $$$AssertStatusOK(sc, "exports items individually")
]]></Implementation>
</Method>

<Method name="TestExport">
<Implementation><![CDATA[
  #define ItemPath(%itemName) ##class(Port.Util).GetItemSourcePathFromWorkspace(%itemName, "dummy-project")
  
  set items = ..GetTestProjectItemsPath("dummy-project", ..GetTestDirectory("../fixtures/_/dummy-project"))
  set itemName = ""
  set sc = $$$OK
  
  set ..Exporter.Overwrite = 1
  set sc = ..Exporter.Export()
  
  if $$$ISOK(sc) {
    for i=1:1:items.Count() {
      set itemName = items.Next(itemName)
      set itemLocation = items.GetAt(itemName)    
      if ##class(Port.Util).ExistsInProject("dummy-project", itemName) {
        if '##class(%File).Exists(itemLocation) {
          set sc = $$$ERROR($$$GeneralError, $$$FormatText("file not generated for item %1", itemName))
          quit        
        }
      }       
    }
  }
  do $$$AssertStatusOK(sc, "exports all project files")
  quit
]]></Implementation>
</Method>
</Class>
</Export>
