<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Port.Project.Synchronizer">
<Super>Port.UnitTest.TestCase,UnitTest.Port.Helper</Super>
<TimeCreated>64471,56194.658409</TimeCreated>

<Property name="Exporter">
<Type>Port.Project.Exporter</Type>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  $$$QuitOnError(..CloneTestProject(..GetTestDirectory("../fixtures"), "dummy-project"))
  set ..Exporter = ##class(Port.Project.Exporter).%New(..GetTestDirectory("../fixtures/_/dummy-project"), 1)
  set ..Exporter.Logger.Silent = 1  
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..DeleteTestProject(..GetTestDirectory("../fixtures"), "dummy-project")
]]></Implementation>
</Method>

<Method name="TestPurge">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set synchronizer = ##class(Port.Project.Synchronizer).%New(..Exporter)
  
  do synchronizer.AddToWhitelist("Dummy.Package.Class.CLS")
  do synchronizer.AddToWhitelist("dummy.MAC")
  do synchronizer.AddToWhitelist("dummy.INC")
  do synchronizer.AddToWhitelist("dummy.MVB")
  do synchronizer.AddToWhitelist($System.CSP.GetDefaultApp($namespace)_"/index.html")
  do synchronizer.AddToWhitelist("MVB.4.MVI")
  do synchronizer.AddToWhitelist("dummy.DFI")
  
  set sc = synchronizer.Purge()
  
  set items = ..GetTestProjectItemsPath("dummy-project", ..GetTestDirectory("../fixtures/_/dummy-project"))
  set itemName = ""
  set templateAssertion = "%1 -> %2"
  for i=1:1:items.Count() {
    set itemName = items.Next(itemName)
    set itemLocation = items.GetAt(itemName)
    set flag = $lf($lb("dummy.MAC", "dummy.INC", "dummy.MVB", "dummy.DFI", $e($System.CSP.GetDefaultApp($namespace)_"/index.html", 2, *), "MVB.4.MVI", "Dummy.Package.Class.CLS"), itemName) > 0
    set assertion = $$$FormatText(templateAssertion, itemLocation, $case(flag, 1: "KEPT", : "PURGED"))
    do $$$AssertEquals(##class(%File).Exists(itemLocation), flag, assertion)
  }
]]></Implementation>
</Method>

<Method name="T">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   
  set ^||Port.Project = "port"
  set t = ..%New(##class(Port.UnitTest.Manager).%New())
  
  do ##class(Port.Configuration).SetCustomWorkspace("dummy-project", t.GetTestDirectory("fixtures/dummy-project"))
  
  $$$QuitOnError(t.OnBeforeOneTest())
  $$$QuitOnError(t.TestPurge())
  $$$QuitOnError(t.OnAfterAllTests())
]]></Implementation>
</Method>
</Class>
</Export>
