Include portutils

/// This is an internal utility used to backup CSP files which is triggered whenever
/// the user attempts to import a workspace that contains a 'public' folder.
Class Port.Project.Backup Extends %RegisteredObject
{

/// The directory where the affected items will be copied into.
Property BackupDirectory As %String [ Internal, Private ];

/// A reference for the logger used to display the current operation.
Property Logger As Port.Project.Importer;

/// An internal flag used to signal if the backup should be made.
Property IsRequired As %Boolean [ InitialExpression = 0, Internal ];

/// A list of affected files that is used to rollback.
Property BackupList As %String [ MultiDimensional ];

Method %OnNew(backupDir As %String) As %Status
{
  set ..BackupDirectory = backupDir
  set ..Logger = ##class(Port.Logger).%New()
  quit $$$OK
}

/// Creates a backup from a list generated by the Importer. Everything affected will be put into the
/// path provided by BackupDiretory, which is usually located at <workspace>/__backup__.
Method Create(ByRef list As %String = 0) As %Status
{

  set sc = $$$OK
  set itemName = ""
  set backupCount = 0
  set backupFolderIsCreated = 0

  if '..IsRequired quit $$$OK

  write ..Logger.Log($$$BackupStart), !
  write ..Logger.Log($$$BackupAlert), !
  write ..Logger.Log($$$BackupMirror, 1)

  do Scan(10, "CSP", .created)

  if $$$ISOK(sc) write ..Logger.Log($$$Done, 1), !
  else  write ..Logger.Log($$$Failed, 1), !
  return sc


Scan(group, type, created)
  set itemName = ""
  set created  = 0
  for {
    set itemName = $order(list(group, type, itemName), 1, updatedFilePath)
    quit:itemName=""

    set appPath = $System.CSP.GetAppName(itemName)
    set destination = ##class(%CSP.Routine).%New(itemName).Filename
    // TODO: Add extra check to avoid backing up files that are not really outdated.
    // Don't backup or remove anything if target file is not present in the project
    // or doesn't exists in the app.
    if '(##class(%File).Exists(updatedFilePath) && ##class(%File).Exists(destination)) {
      continue
    }
    set backup = ##class(Port.Util).ItemToPath(itemName, ..BackupDirectory)
    set backupDirectory = ##class(%File).GetDirectory(backup)
    set sc = ##class(Port.Util).EnsurePathExists(backupDirectory)
    if $$$ISERR(sc) quit

    set created = 1
    set isCopied = ##class(%File).CopyFile(destination, backup, 1)
    if isCopied = 0 {
      set sc = $$$ADDSC(sc, $$$PERROR($$$UnableToCopySource, itemName, backup))
    } else {
      set i%BackupList = $get(i%BackupList, 0) + 1
      set i%BackupList(i%BackupList) = $listbuild(backup, destination)
    }
  }
  if 'created {
    set ..IsRequired = 0
  }
}

/// Undo the changes made by the importer copying the __backup__ directory back into the CSP directory.
Method Rollback() As %Status
{
  set sc = $$$OK

  for i=1:1:i%BackupList {
    set entry = i%BackupList(i)
    set backup = $listget(entry, 1)
    set destination = $listget(entry, 2)

    set success = ##class(%File).CopyFile(backup, destination, 1)
    if 'success set sc = $$$ADDSC(sc, $$$PERROR($$$UnableToCopySource, backup, destination))
  }

  kill i%BackupList
  quit sc
}

}

